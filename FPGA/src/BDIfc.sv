`include "Channel.svh"
`include "FPGA_BD_Interface.sv"
// for quartus, we add external IP to the project
`ifdef SIMULATION
  `include "../quartus/BDInFIFO.v"
  `include "../quartus/BDOutFIFO.v"
`endif

// Encapsulated BD handshakers and clock-domain-crossing
// FIFO for upstream and downstream.
//
// BD handshakers (and BD) use BD_clk, which is slower
// than core_clk and may also be skewed to account for 
// the output pad delays. Generated by PLL.

module BDIfc (
  // Core side
  // output
  Channel core_up,
  // input
  Channel core_dn,
  
  // BD side
  // output
  input               BD_out_ready,
  output logic        BD_out_valid,
  output logic [20:0] BD_out_data,

  // input
  output logic        BD_in_ready,
  input               BD_in_valid,
  input [33:0]        BD_in_data,

  input core_clk, BD_out_clk_int, BD_in_clk_int, reset
  );

localparam NBDdn = 21;
localparam NBDup = 34;
// note: in/out is inconsistent here
// NBDdn/out refers to BD's input/output
// not the inputs/outputs to THIS MODULE
// which is what everything else is based on

// signals between FIFO and BD ifc
Channel #(NBDup) core_up_slow();
Channel #(NBDdn) core_dn_slow();

/////////////////////////////////////
// downstream FIFO ("-> core's BD_out")

logic [NBDdn-1:0] out_FIFO_data_in;
logic             out_FIFO_wr_en;
logic             out_FIFO_wr_full;
logic             out_FIFO_wr_clk;

logic [NBDdn-1:0] out_FIFO_data_out;
logic             out_FIFO_rd_ack;
logic             out_FIFO_rd_empty;
logic             out_FIFO_rd_clk;

BDOutFIFO BD_out_FIFO(
  .data(out_FIFO_data_in),
  .rdclk(out_FIFO_rd_clk),
  .rdreq(out_FIFO_rd_ack),
  .wrclk(out_FIFO_wr_clk),
  .wrreq(out_FIFO_wr_en),
  .q(out_FIFO_data_out),
  .rdempty(out_FIFO_rd_empty),
  .wrfull(out_FIFO_wr_full));

// handshake FIFO input
assign out_FIFO_wr_clk  = core_clk;
assign out_FIFO_data_in = core_dn.d;
assign out_FIFO_wr_en   = core_dn.v & ~out_FIFO_wr_full;
assign core_dn.a        = core_dn.v & ~out_FIFO_wr_full;

// handshake FIFO output
assign out_FIFO_rd_clk  = BD_out_clk_int;
assign core_dn_slow.d   = out_FIFO_data_out;
assign out_FIFO_rd_ack  = core_dn_slow.a;
assign core_dn_slow.v   = ~out_FIFO_rd_empty;

/////////////////////////////////////
// upstream FIFO ("-> core's BD_in")

logic [NBDup-1:0] in_FIFO_data_in;
logic             in_FIFO_wr_en;
logic             in_FIFO_wr_full;
logic             in_FIFO_wr_clk;

logic [NBDup-1:0] in_FIFO_data_out;
logic             in_FIFO_rd_ack;
logic             in_FIFO_rd_empty;
logic             in_FIFO_rd_clk;

BDInFIFO BD_in_FIFO(
  .data(in_FIFO_data_in),
  .rdclk(in_FIFO_rd_clk),
  .rdreq(in_FIFO_rd_ack),
  .wrclk(in_FIFO_wr_clk),
  .wrreq(in_FIFO_wr_en),
  .q(in_FIFO_data_out),
  .rdempty(in_FIFO_rd_empty),
  .wrfull(in_FIFO_wr_full));

// handshake FIFO input
assign in_FIFO_wr_clk  = BD_in_clk_int;
assign in_FIFO_data_in = core_up_slow.d;
assign in_FIFO_wr_en   = core_up_slow.v & ~in_FIFO_wr_full;
assign core_up_slow.a  = core_up_slow.v & ~in_FIFO_wr_full;

// handshake FIFO output
assign in_FIFO_rd_clk  = core_clk;
assign core_up.d       = in_FIFO_data_out;
assign in_FIFO_rd_ack  = core_up.a;
assign core_up.v       = ~in_FIFO_rd_empty;

/////////////////////////////////////
// downstream handshaker

FPGA_TO_BD bd_down_ifc(
  .bd_channel(core_dn_slow),
  .valid(BD_out_valid),
  .data(BD_out_data),
  .ready(BD_out_ready),
  .reset(reset),
  .clk(BD_out_clk_int));

/////////////////////////////////////
// upstream handshaker

BD_TO_FPGA bd_up_ifc(
  .bd_channel(core_up_slow),
  .valid(BD_in_valid),
  .data(BD_in_data),
  .ready(BD_in_ready),
  .reset(reset),
  .clk(BD_in_clk_int));

endmodule
